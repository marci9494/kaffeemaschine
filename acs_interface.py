# Simulator für die App-Schnittstelle WMF-Kaffeemaschine# Hier können Getränke bestellt und die Queue abgefragt werden.# Verwendet wird das Low Level Interface, entweder der ACS-Software (KaffeeServicde.cs)# oder der Simulator sim_acs.py# Version 0.9 T. Hänisch 30.7.2018from flask import Flaskfrom flask import json,Responsefrom flask import request, render_template, redirectimport urllib.requestimport datetimeimport sysimport time# Die id für die nächste Bestellung# Achtung, bei Neustart nicht eindeutig, sollte persistent gemacht werden ...acs_next_order = 4711def log_message(txt):    print(txt)app = Flask(__name__)@app.route('/listBeverages')def list_beverages():    return '[{"name": "Espresso", "id": 1},{"name": "Latte Macciato", "id": 2},{"name": "Cafe Crema", "id": 3}]'@app.route('/orderBeverage')def orderBeverage():    global acs_next_order    beverage = request.args.get('productID')    if (beverage == None):        log_message("Kein Getränk angegeben")        response = Response(            response=json.dumps("No command given"),            status=500,            mimetype='application/json'        )    else:        order_id = acs_next_order        acs_next_order += 1        log_message("Starting Beverage " + str(order_id))        content = []        entry = {}        entry["estimatedTime"] = "180"        entry["uuid"] = "5945c961-e74d-478f-8afe-da53cf4189e3"        content.append(entry)        response = Response(            response=json.dumps(content),            status=200,            mimetype='application/json'        )                response.set_cookie("order_id",str(order_id))    return response@app.route('/getEstimatedTime')def getEstimatedTime():    uuid = request.args.get('uuid')    content = []    entry = {}    entry["estimatedTime"] = "180"    content.append(entry)    response = Response(        response=json.dumps(content),        status=200,        mimetype='application/json'    )    return response@app.route('/updateBeverage')def updateBeverage():    content = []    entry = {}    entry["status"] = "false"    content.append(entry)    response = Response(        response=json.dumps(content),        status=200,        mimetype='application/json'    )    return response@app.route('/deleteBeverage')def deleteBeverage():    content = []    entry = {}    entry["status"] = "true"    content.append(entry)    response = Response(        response=json.dumps(content),        status=200,        mimetype='application/json'    )    return response@app.route('/getStatus')def getStatus():    order_id = request.args.get('order_id')    if (order_id != None):        msg= "ready for " + order_id        response = Response(            response=json.dumps(msg),            status=200,            mimetype='application/json'        )    else:           content = []        entry = {}        entry["id"] = "5945c961-e74d-478f-8afe-da53cf4189e3"        entry["productID"] = "3"        entry["deliveryDate"] = "2004-06-14T16:26:56"        content.append(entry)        entry = {}        entry["id"] = "a34dab61-e74d-478f-8afe-da53cf4189e3"        entry["productID"] = "1"        entry["deliveryDate"] = "2018-08-06T16:26:56"        content.append(entry)        response = Response(            response=json.dumps(content),            status=200,            mimetype='application/json'        )    return response@app.route('/')def index():    return "<html><body><h1>Simulator für die App-Schnittstelle, services unter /orderBeverage und /getStatus </html></body>"if __name__ == '__main__':    app.run(debug=True)